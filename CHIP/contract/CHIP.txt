pragma solidity ^0.4.16;

contract Token{
    function balanceOf(address _owner) public constant returns (uint256 balance);

    function transfer(address _to, uint256 _value) public returns (bool success);

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    function approve(address _spender, uint256 _value) public returns (bool success);

    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract CHIP is Token {
    
string public name = "CHIP";

string public symbol = "CHIP";

uint8 public decimals = 7;

uint256 _totalSupply = 16581375;

mapping(address => uint256) balances;

mapping(address => mapping (address => uint256)) allowed;

constructor (uint256 _initialAmount, uint8 _decimalUnits, string _tokenName, string _tokenSymbol) public {

_totalSupply = _initialAmount * 10 ** uint256(_decimalUnits);

balances[msg.sender] = _totalSupply;

name = _tokenName;
decimals = _decimalUnits;
symbol = _tokenSymbol;
}

function totalSupply() public constant returns (uint256 theTotalSupply) {
return _totalSupply;
}

function balanceOf(address _owner) public constant returns (uint256 balance) {
return balances[_owner];
}

function approve(address _spender, uint256 _amount) public returns (bool success) {
allowed[msg.sender][_spender] = _amount;
emit Approval(msg.sender, _spender, _amount);
return true;
}
function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }
    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {

require(_to != 0x0);


require(balances[_from] >= _value);


require(balances[_to] + _value > balances[_to]);


uint previousBalances = balances[_from] + balances[_to];


balances[_from] -= _value;


balances[_to] += _value;


emit Transfer(_from, _to, _value);


require(balances[_from] + balances[_to] == previousBalances);

return true;
    }


    function transfer(address _to, uint256 _value) public returns (bool) {
       return _transfer(msg.sender, _to, _value);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {

        require(_value <= allowed[_from][msg.sender]);

        allowed[_from][msg.sender] -= _value;

        _transfer(_from, _to, _value);

        return true;
    }
}